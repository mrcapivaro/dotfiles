# vim:ft=bash:

ALIASRC="$HOME/.config/shell/aliasrc"
[ -f "$ALIASRC" ] && . "$ALIASRC"

PROFILERC="$HOME/.config/shell/profilerc"
[ -f "$PROFILERC" ] && . "$PROFILERC"

# Autoconfig {{{1

## compinstall
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle :compinstall filename '/home/mrcapivaro/.zshrc'
autoload -Uz compinit
compinit

## case insensitive path-completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select

## zsh-newuser-install
HISTFILE="$ZCONFDIR/histfile"
HISTSIZE=1000
SAVEHIST=1000
setopt autocd
unsetopt beep extendedglob nomatch

# 1}}}
# Extensions {{{1

## Eval's
eval "$(starship init zsh)"

eval "$(direnv hook zsh)"

eval "$(zoxide init zsh)"
which z >/dev/null 2>&1 && alias cd="z"

## Plugins
use-git-plugin() {
    local gitrepo="$1"
    local name=${gitrepo#*/}
    local plugins_dir="$HOME/.local/share/zsh/plugins"
    [ ! -d "$plugins_dir" ] && mkdir -p "$plugins_dir"
    if [ ! -d "$plugins_dir/$name" ]; then
        git clone "https://github.com/$gitrepo.git" "$plugins_dir/$name"
    fi
    local plugin_init_file="$plugins_dir/$name/$name.plugin.zsh"
    [ -e "$plugin_init_file" ] && . "$plugin_init_file"
}

use-git-plugin "Aloxaf/fzf-tab" # must come after compinit and before other plugins
use-git-plugin "zsh-users/zsh-syntax-highlighting"
use-git-plugin "zsh-users/zsh-autosuggestions"
use-git-plugin "zsh-users/zsh-history-substring-search"

## CLI Programs
FZFRC="$HOME/.config/fzf/fzfrc"
[ -f "$FZFRC" ] && which fzf >/dev/null 2>&1 && . "$FZFRC"

# 1}}}
# Keybinds {{{1

# Set the default emacs keybinds.
bindkey -e

# Ensure that home and end keys work as intended.
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# Traverse words with C-{Left,Right}.
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

## Place killed text with <'C-U'(kill-whole-line)> into the clipboard.

# Try to determine the correct clipboard command.
cb=""
if [[ "$XDG_SESSION_TYPE" = "x11" ]]; then
    cb="xclip -sel clipboard"
elif [[ "$XDG_SESSION_TYPE" = "wayland" ]]; then
    cb="wl-copy"
fi

# Create wrapper zsh widget for killing the whole line.
function kill-whole-line-wrapper() {
    zle kill-whole-line
    echo -n "$CUTBUFFER" | eval "$cb"
}
zle -N kill-whole-line-wrapper

# Binding the original keybind for kill-whole-line for the wrapper.
bindkey "^U" kill-whole-line-wrapper

# 1}}}

# emacs-eat terminal integration
[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
  source "$EAT_SHELL_INTEGRATION_DIR/zsh"
